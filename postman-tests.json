{
	"info": {
		"_postman_id": "101b2f6d-85d5-4c78-aa91-fc19c9836058",
		"name": "[Wolno≈õciowiec] File Repository",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Generate basic token for images only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f75b530a-1115-47f7-a43d-185141a11ff7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"pm.globals.set(\"token_basic\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"]\n}"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup basic token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b6d1e26-465d-4afe-9758-58d34715c93c",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has role to upload images\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"upload.images\");",
									"});",
									"",
									"pm.test(\"Has not defined max file size\", function () {",
									"    pm.expect(jsonData.max_file_size).to.equal(0);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/lookup/{{token_basic}}?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_basic}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token with tags and allowed mimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b17d2a3-5f08-4e75-bd7f-f9290e9b0a0d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.globals.set(\"token_with_tags_and_mimes\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup token with tags and mimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f090abd-6cd6-4902-adc4-56c5697afb1d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Can upload for specific tags\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"user_uploads.u123\");",
									"    pm.expect(pm.response.text()).to.include(\"user_uploads\");",
									"});",
									"",
									"pm.test(\"Has role to upload images\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"upload.images\");",
									"});",
									"",
									"pm.test(\"Has defined max file size\", function () {",
									"    pm.expect(jsonData.max_file_size).to.equal(14579);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/lookup/{{token_with_tags_and_mimes}}?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_with_tags_and_mimes}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Job] Clear expired tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c03c1076-3007-4543-b316-4eaec7021fcd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/jobs/token/expired/clear?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"jobs",
								"token",
								"expired",
								"clear"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token with not enough allowed maximum file size (100b)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f8cd581-cea0-4038-af88-1ea8e09fc8b7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.globals.set(\"token_with_low_file_size_limit\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 100\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Invalid role name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e86decd2-0765-4301-9f99-485468ced6ce",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Please select valid roles\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Cannot generate token without proper role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "500828af-d547-4a4d-8e39-07a4e403f31d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Cannot lookup tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31215dc8-d91f-41ae-b801-1799542efaa6",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/lookup/{{token_basic}}?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_basic}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation][Job] Cannot run technical job without proper role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5797775a-7e22-4731-af15-9bc3f5d9a87d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/jobs/token/expired/clear?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"jobs",
								"token",
								"expired",
								"clear"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c103d2a2-8227-4ba3-bce6-60465ab3489c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Contains roles list as a dict\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(typeof jsonData.roles).to.eql('object');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/roles?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"roles"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Technical",
			"item": [
				{
					"name": "List routes",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository/routing/map",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"routing",
								"map"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d61b07-a205-4645-9751-c239bcc7836a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registry: Upload / Delete",
			"item": [
				{
					"name": "[Upload] By URL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"http://zsp.net.pl/files/barroness_logo.png\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Delete] Remove file added previously",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc11ec8c-cc22-4cd1-81e0-cc1984b26bfe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"https://iwa-ait.org/sites/default/files/iwaait_1.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/file/f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"file",
								"f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Again same file by URL with password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"http://zsp.net.pl/files/barroness_logo.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Delete] Try to delete file without correct password and non-admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18d6696c-d6c7-459e-a16e-65e919b53b21",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"https://iwa-ait.org/sites/default/files/iwaait_1.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/file/f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"file",
								"f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Add a file with a tag",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"file://examples/files/image.jpg\",\n    \"tags\": [\n    \t\"grassroot\", \"memes\"\n    ]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Too big file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b96bf4bd-26ab-49cc-bfcc-dbb158625b69",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Checks the file size is validated\", function () {",
									"    pm.expect(jsonData.status).to.eql('File size is too big');",
									"    pm.expect(jsonData.code).to.eql(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/upload?_token={{token_with_low_file_size_limit}}&fileName=heart.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"upload"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_low_file_size_limit}}"
								},
								{
									"key": "fileName",
									"value": "heart.png"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Not allowed mime type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e4e64f0-1228-4e16-8c2f-ef280ed08309",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Checks the file size is validated\", function () {",
									"    pm.expect(jsonData.status).to.eql('Mime type not allowed');",
									"    pm.expect(jsonData.code).to.eql(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "one-two-three a plaintext file here\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/upload?_token={{token_with_low_file_size_limit}}&fileName=heart.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"upload"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_low_file_size_limit}}"
								},
								{
									"key": "fileName",
									"value": "heart.png"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f170a6e9-2d09-42bd-8872-2a186eef98cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cc44a1b7-8dae-4c31-ab72-d52cf476c3c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Registry: Listing",
			"item": [
				{
					"name": "Generate token for listing ALL tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a294cd3-a2bb-4dee-8655-d1d05b0258f9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"pm.globals.set(\"token_list_all_tags\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"view.files_from_all_tags\", \"view.can_use_listing_endpoint_at_all\"]\n}"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f1b3da9-20b5-469b-92a3-f365d8f96dd4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Current page is first\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum amount of results is 1 per page\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum amount of results is 2 per page\", function () {",
									"    pm.expect(jsonData.pagination.perPage).to.eql(2);",
									"});",
									"",
									"pm.test(\"There are exactly 2 results\", function () {",
									"    pm.expect(jsonData.results.length).to.eql(2);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token=test-token-full-permissions&page=1&limit=2",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by TEXT 'barroness_logo'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d140e820-b6f3-4bf5-9054-b4f82b5b0680",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Current page is first\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum per page is fallback to default - 20 elements per page\", function () {",
									"    pm.expect(jsonData.pagination.perPage).to.eql(20);",
									"});",
									"",
									"pm.test(\"There is only one match\", function () {",
									"    pm.expect(jsonData.results.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"First result atches file we were looking for - baroness_logo\", function () {",
									"    pm.expect(jsonData.results[0].publicUrl).to.contain('barroness_logo.png');",
									"    pm.expect(jsonData.results[0].mimeType).to.equal('image/png');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token=test-token-full-permissions&searchQuery=barroness_logo",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted file should be anonymous if password not specified",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b69ed365-790a-49e7-9b2f-6a1743fe4c64",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"File name is anonymous\", function () {",
									"    pm.expect(jsonData.results[0].filename).to.equal('anonymous');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token={{token_list_all_tags}}&searchQuery=barroness_logo",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_list_all_tags}}"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted file should be visible when correct password supplied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97cb3791-026d-43b1-9e27-fdc1d0529092",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"File name is not hidden when password is correct\", function () {",
									"    pm.expect(jsonData.results[0].filename).to.not.equal('anonymous');",
									"    pm.expect(jsonData.results[0].filename).to.contain('barroness_logo');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token={{token_list_all_tags}}&searchQuery=barroness_logo&password=InternationalWorkersAssociation",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_list_all_tags}}"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								},
								{
									"key": "password",
									"value": "InternationalWorkersAssociation"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Backup",
			"item": [
				{
					"name": "Collection creation and editing",
					"item": [
						{
							"name": "Validation",
							"item": [
								{
									"name": "Validation check",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f0bda2c-f849-4752-9c73-fa982ac59d67",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"All fields are at its place\", function () {",
													"    pm.expect(jsonData.errors.maxBackupsCount).to.eql('number_cannot_be_negative_value');",
													"    pm.expect(jsonData.errors.maxOneVersionSize).to.eql('cannot_parse_disk_space_check_format');",
													"    pm.expect(jsonData.errors.strategy).to.eql('Unknown strategy \"invalid_strategy\". Allowed: delete_oldest_when_adding_new, alert_when_backup_limit_reached');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": -5,\n\t\"maxOneVersionSize\": \"invalid-format-cannot-parse\",\n\t\"maxCollectionSize\": \"1111\",\n\t\"strategy\": \"invalid_strategy\",\n\t\"description\": null\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Single element size cannot be bigger than whole collection limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1de254cc-720e-4930-bd0b-5510fd1cb72c",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxCollectionSize is properly validated\", function () {",
													"    pm.expect(jsonData.errors.maxCollectionSize).to.eql('max_collection_size_is_lower_than_single_element_size');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 4,\n\t\"maxOneVersionSize\": \"11MB\",\n\t\"maxCollectionSize\": \"10MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Single element limit is bigger than globally defined",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d7b7e65-0e8a-42da-ad76-e3e6088cd93c",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxOneVersionSize is properly validated\", function () {",
													"    pm.expect(jsonData.errors.maxOneVersionSize).to.eql('max_one_version_size_too_big');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 4,\n\t\"maxOneVersionSize\": \"50MB\",\n\t\"maxCollectionSize\": \"10MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Whole collection size (mb/kb/gb) is bigger than globally defined limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "372a0b11-0eac-4da2-b8e3-cd0fb56004ef",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxCollectionSize cannot be bigger than the defined limit\", function () {",
													"    pm.expect(jsonData.errors.maxCollectionSize).to.eql('max_collection_size_too_big');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 4,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5TB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Max backup count cannot be higher than globally defined limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "231c444d-9820-47ee-b597-505da35a8eba",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxBackupsCount cannot be bigger than the defined limit\", function () {",
													"    pm.expect(jsonData.errors.maxBackupsCount).to.eql('max_backups_count_too_many');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 9000,\n\t\"maxOneVersionSize\": \"5MB\",\n\t\"maxCollectionSize\": \"10MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Collection is has not enough max space",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee2ba435-98a8-41d1-ad51-1f876e85d4c7",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"A combination of maxBackupsCount and maxOneVersionSize must give at less or equal maxCollectionSize\", function () {",
													"    pm.expect(jsonData.errors.maxCollectionSize).to.eql('max_collection_size_will_have_not_enough_space_to_keep_max_number_of_items');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"5MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions&simulate=true",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												},
												{
													"key": "simulate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Permissions check",
							"item": [
								{
									"name": "[Permissions -> Limits] Create token that does not allow creating unlimited collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eeca4c93-8eec-4230-b205-6df99bf28205",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.globals.set(\"token_without_unlimited_collections\", jsonData.tokenId);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roles\": [\"collections.create_new\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"auth",
												"token",
												"generate"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Permissions -> Limits] Create token for unlimited collections creating",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e63ae3c-d79c-4975-8338-ca6809ad1498",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.globals.set(\"token_unlimited_collections\", jsonData.tokenId);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roles\": [\"collections.create_new\", \"collections.allow_infinite_limits\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"auth",
												"token",
												"generate"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create collection: not allowed to create collection with infinite limits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "612c51f3-f96a-4f69-bad1-1f2cd0add9ad",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"A proper message about access rights will appear\", function () {",
													"    pm.expect(jsonData.status).to.eql('Current token does not allow to create this collection');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token={{token_without_unlimited_collections}}&simulate=true",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_without_unlimited_collections}}"
												},
												{
													"key": "simulate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create collection: allowed to create infinite collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51b55601-3b8c-4811-9323-e373c16502f8",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Id is 36 length UUID\", function () {",
													"    pm.expect(jsonData.collection.id.length).to.eql(36);",
													"});",
													"",
													"pm.test(\"All fields are at its place\", function () {",
													"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
													"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(0);",
													"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
													"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
													"    pm.expect(jsonData.collection.description).to.eql('Test collection');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token={{token_unlimited_collections}}&simulate=true",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_unlimited_collections}}"
												},
												{
													"key": "simulate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a token that allows to create collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fb68bc5-c302-4e99-b07f-44907e0de989",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.globals.set(\"token_create_collections\", jsonData.tokenId);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\"collections.create_new\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"auth",
										"token",
										"generate"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create collection: success (#1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e6d2508-5215-4514-a402-a1c0a61a9fd9",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('Test collection');",
											"});",
											"",
											"",
											"pm.globals.set(\"collection_1\", jsonData.collection.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit created collection #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cf493b6-5caa-46dc-af4f-ab079affdd43",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(0);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('Test collection (modified)');",
											"});",
											"",
											"pm.test(\"Id was not changed\", function () {",
											"    pm.expect(jsonData.collection.id).to.eql(pm.globals.get('collection_1'));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"collection\": \"{{collection_1}}\",\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection (modified)\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "511e6518-d5cf-4640-840d-eeb9c3d34036",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f3ff06e5-edb5-403c-bb96-21542152c657",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collection deletion",
					"item": [
						{
							"name": "Create collection #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0df8cea-1236-4c59-9b3f-3281f904bc2a",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('IWA-AIT.org old format backups');",
											"});",
											"",
											"",
											"pm.globals.set(\"collection_2\", jsonData.collection.id);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"IWA-AIT.org old format backups\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete collection #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "444a0900-7707-4363-b958-c086197caeff",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_2}}?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_2}}"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete #2 second time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ccbe46-0ae7-43d5-97e5-c8cb9eeff4d8",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error about that the collection was already deleted is present\", function () {",
											"    pm.expect(jsonData['form.collection'][0]).to.eql('collection_no_longer_exists');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_2}}?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_2}}"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Attempt to edit deleted collection #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0982e7ef-ffd0-4953-b79f-c371557faaee",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error about that the collection was already deleted is present\", function () {",
											"    pm.expect(jsonData['form.collection'][0]).to.eql('collection_no_longer_exists');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"collection\": \"{{collection_2}}\",\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection (modified)\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collection fetching",
					"item": [
						{
							"name": "Create collection: success (#3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "176e16d7-86cf-464b-80ee-c56b8d33ab4b",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('Solidarity Federation documents backup');",
											"});",
											"",
											"",
											"pm.globals.set(\"collection_3\", jsonData.collection.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Solidarity Federation documents backup\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch (#3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad9227bd-f11a-41c7-b28d-894886a23c70",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Returns a collection of proper id\", function () {",
											"    pm.expect(jsonData.collection.id).to.eql(pm.globals.get('collection_3'));",
											"});",
											"",
											"pm.test(\"Collection has matching description the collection that was created as #3\", function () {",
											"    pm.expect(jsonData.collection.description).to.eql('Solidarity Federation documents backup');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Solidarity Federation documents backup\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_3}}?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_3}}"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collection listing",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Backup upload",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "85fbbe4d-e82b-4d62-b318-7f1de7cef9ae",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4fd2ca93-ff20-4830-9189-315c46ea61bb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e1200f8d-e3d0-4dd5-aa14-f5054fb10b06",
			"key": "appUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}