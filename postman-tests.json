{
	"info": {
		"_postman_id": "101b2f6d-85d5-4c78-aa91-fc19c9836058",
		"name": "[Wolno≈õciowiec] File Repository",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Generate basic token for images only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f75b530a-1115-47f7-a43d-185141a11ff7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"pm.globals.set(\"token_basic\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"]\n}"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup basic token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b6d1e26-465d-4afe-9758-58d34715c93c",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has role to upload images\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"upload.images\");",
									"});",
									"",
									"pm.test(\"Has not defined max file size\", function () {",
									"    pm.expect(jsonData.max_file_size).to.equal(0);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/lookup/{{token_basic}}?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_basic}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token with tags and allowed mimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b17d2a3-5f08-4e75-bd7f-f9290e9b0a0d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.globals.set(\"token_with_tags_and_mimes\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup token with tags and mimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f090abd-6cd6-4902-adc4-56c5697afb1d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Can upload for specific tags\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"user_uploads.u123\");",
									"    pm.expect(pm.response.text()).to.include(\"user_uploads\");",
									"});",
									"",
									"pm.test(\"Has role to upload images\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"upload.images\");",
									"});",
									"",
									"pm.test(\"Has defined max file size\", function () {",
									"    pm.expect(jsonData.max_file_size).to.equal(14579);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/lookup/{{token_with_tags_and_mimes}}?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_with_tags_and_mimes}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Job] Clear expired tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c03c1076-3007-4543-b316-4eaec7021fcd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/jobs/token/expired/clear?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"jobs",
								"token",
								"expired",
								"clear"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token with not enough allowed maximum file size (100b)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f8cd581-cea0-4038-af88-1ea8e09fc8b7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.globals.set(\"token_with_low_file_size_limit\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 100\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Invalid role name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e86decd2-0765-4301-9f99-485468ced6ce",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Please select valid roles\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Cannot generate token without proper role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "500828af-d547-4a4d-8e39-07a4e403f31d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Cannot lookup tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31215dc8-d91f-41ae-b801-1799542efaa6",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/lookup/{{token_basic}}?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_basic}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation][Job] Cannot run technical job without proper role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5797775a-7e22-4731-af15-9bc3f5d9a87d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/jobs/token/expired/clear?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"jobs",
								"token",
								"expired",
								"clear"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c103d2a2-8227-4ba3-bce6-60465ab3489c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Contains roles list as a dict\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(typeof jsonData.roles).to.eql('object');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/roles?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"roles"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Technical",
			"item": [
				{
					"name": "List routes",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository/routing/map",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"routing",
								"map"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d61b07-a205-4645-9751-c239bcc7836a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registry: Upload / Delete",
			"item": [
				{
					"name": "[Upload] By URL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"http://zsp.net.pl/files/barroness_logo.png\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Delete] Remove file added previously",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc11ec8c-cc22-4cd1-81e0-cc1984b26bfe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"https://iwa-ait.org/sites/default/files/iwaait_1.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/file/f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"file",
								"f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Again same file by URL with password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"http://zsp.net.pl/files/barroness_logo.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Delete] Try to delete file without correct password and non-admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18d6696c-d6c7-459e-a16e-65e919b53b21",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"https://iwa-ait.org/sites/default/files/iwaait_1.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/file/f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"file",
								"f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Add a file with a tag",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"file://examples/files/image.jpg\",\n    \"tags\": [\n    \t\"grassroot\", \"memes\"\n    ]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Too big file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b96bf4bd-26ab-49cc-bfcc-dbb158625b69",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Checks the file size is validated\", function () {",
									"    pm.expect(jsonData.status).to.eql('File size is too big');",
									"    pm.expect(jsonData.code).to.eql(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/upload?_token={{token_with_low_file_size_limit}}&fileName=heart.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"upload"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_low_file_size_limit}}"
								},
								{
									"key": "fileName",
									"value": "heart.png"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Not allowed mime type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e4e64f0-1228-4e16-8c2f-ef280ed08309",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Checks the file size is validated\", function () {",
									"    pm.expect(jsonData.status).to.eql('Mime type not allowed');",
									"    pm.expect(jsonData.code).to.eql(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "one-two-three a plaintext file here\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/upload?_token={{token_with_low_file_size_limit}}&fileName=heart.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"upload"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_low_file_size_limit}}"
								},
								{
									"key": "fileName",
									"value": "heart.png"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f170a6e9-2d09-42bd-8872-2a186eef98cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cc44a1b7-8dae-4c31-ab72-d52cf476c3c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Registry: Listing",
			"item": [
				{
					"name": "Generate token for listing ALL tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a294cd3-a2bb-4dee-8655-d1d05b0258f9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"pm.globals.set(\"token_list_all_tags\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"view.files_from_all_tags\", \"view.can_use_listing_endpoint_at_all\"]\n}"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f1b3da9-20b5-469b-92a3-f365d8f96dd4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Current page is first\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum amount of results is 1 per page\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum amount of results is 2 per page\", function () {",
									"    pm.expect(jsonData.pagination.perPage).to.eql(2);",
									"});",
									"",
									"pm.test(\"There are exactly 2 results\", function () {",
									"    pm.expect(jsonData.results.length).to.eql(2);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token=test-token-full-permissions&page=1&limit=2",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by TEXT 'barroness_logo'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d140e820-b6f3-4bf5-9054-b4f82b5b0680",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Current page is first\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum per page is fallback to default - 20 elements per page\", function () {",
									"    pm.expect(jsonData.pagination.perPage).to.eql(20);",
									"});",
									"",
									"pm.test(\"There is only one match\", function () {",
									"    pm.expect(jsonData.results.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"First result atches file we were looking for - baroness_logo\", function () {",
									"    pm.expect(jsonData.results[0].publicUrl).to.contain('barroness_logo.png');",
									"    pm.expect(jsonData.results[0].mimeType).to.equal('image/png');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token=test-token-full-permissions&searchQuery=barroness_logo",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted file should be anonymous if password not specified",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b69ed365-790a-49e7-9b2f-6a1743fe4c64",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"File name is anonymous\", function () {",
									"    pm.expect(jsonData.results[0].filename).to.equal('anonymous');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token={{token_list_all_tags}}&searchQuery=barroness_logo",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_list_all_tags}}"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted file should be visible when correct password supplied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97cb3791-026d-43b1-9e27-fdc1d0529092",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"File name is not hidden when password is correct\", function () {",
									"    pm.expect(jsonData.results[0].filename).to.not.equal('anonymous');",
									"    pm.expect(jsonData.results[0].filename).to.contain('barroness_logo');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token={{token_list_all_tags}}&searchQuery=barroness_logo&password=InternationalWorkersAssociation",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_list_all_tags}}"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								},
								{
									"key": "password",
									"value": "InternationalWorkersAssociation"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "85fbbe4d-e82b-4d62-b318-7f1de7cef9ae",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4fd2ca93-ff20-4830-9189-315c46ea61bb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e1200f8d-e3d0-4dd5-aa14-f5054fb10b06",
			"key": "appUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}